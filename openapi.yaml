openapi: 3.0.3
info:
  title: Collaborative Travel Planner API
  description: |-
    This is the API for the Collaborative Travel Planner application. It allows users to create, manage, and share travel itineraries. The API supports real-time collaboration features through WebSockets.
    Authentication is handled via JWT Bearer tokens obtained from Azure AD B2C.
  version: 1.0.0
servers:
  - url: /api
paths:
  /trips:
    get:
      summary: Get all trips for the user
      description: Retrieves a list of all trips associated with the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of trips.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
    post:
      summary: Create a new trip
      description: Creates a new trip with the provided details.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
      responses:
        '201':
          description: Trip created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
  /trips/{tripId}:
    get:
      summary: Get a specific trip
      description: Retrieves the details of a single trip by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested trip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    put:
      summary: Update a trip
      description: Updates the details of an existing trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
      responses:
        '200':
          description: The updated trip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    delete:
      summary: Delete a trip
      description: Deletes a trip by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Trip deleted successfully.
  /trips/{tripId}/destinations:
    post:
      summary: Add a destination to a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDestination'
      responses:
        '201':
          description: Destination added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
  /trips/{tripId}/destinations/{destinationId}:
    put:
      summary: Update a destination
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDestination'
      responses:
        '200':
          description: Destination updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    delete:
      summary: Remove a destination
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Destination removed.
  /trips/{tripId}/collaborators:
    post:
      summary: Add a collaborator to a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCollaborator'
      responses:
        '200':
          description: Collaborator added.
  /trips/{tripId}/collaborators/{userId}:
    delete:
      summary: Remove a collaborator from a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collaborator removed.
  /ai/itinerary:
    post:
      summary: Generate an itinerary with AI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIGenerateItineraryRequest'
      responses:
        '200':
          description: AI-generated itinerary.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIGeneratedItinerary'
  /ai/recommendations:
    post:
      summary: Get AI-powered recommendations
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRecommendationsRequest'
      responses:
        '200':
          description: AI-generated recommendations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIRecommendationsResponse'
  /ai/enhance-trip/{tripId}:
    post:
      summary: Enhance a trip with AI suggestions
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: AI-generated enhancements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIEnhancementsResponse'
  /users/me:
    get:
      summary: Get current user profile
      description: Retrieves the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update current user profile
      description: Updates the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Updated user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      summary: Search users
      description: Search for users by name or email (for collaboration features).
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term to match against user names or emails
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a user's public profile by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User's public profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
  /collaboration/token/{tripId}:
    get:
      summary: Get a Web PubSub access token
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Web PubSub access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPubSubToken'
components:
  schemas:
    Trip:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/Destination'
        collaborators:
          type: array
          items:
            $ref: '#/components/schemas/Collaborator'
    NewTrip:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    Destination:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
    NewDestination:
      type: object
      properties:
        name:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
    Collaborator:
      type: object
      properties:
        userId:
          type: string
        role:
          type: string
          enum: [editor, viewer]
    NewCollaborator:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [editor, viewer]
    AIGenerateItineraryRequest:
      type: object
      properties:
        destination:
          type: string
        duration:
          type: integer
        budget:
          type: number
        interests:
          type: array
          items:
            type: string
        travelStyle:
          type: string
          enum: [budget, mid-range, luxury]
        groupSize:
          type: integer
    AIGeneratedItinerary:
      type: object
      # Define the schema for the AI-generated itinerary
    AIRecommendationsRequest:
      type: object
      properties:
        destination:
          type: string
        category:
          type: string
          enum: [restaurants, activities, accommodations, transportation]
        budget:
          type: number
        preferences:
          type: array
          items:
            type: string
    AIRecommendationsResponse:
      type: object
      # Define the schema for the AI-generated recommendations
    AIEnhancementsResponse:
      type: object
      # Define the schema for the AI-generated enhancements
    WebPubSubToken:
      type: object
      properties:
        token:
          type: string
        url:
          type: string
        expiresOn:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PublicUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT