openapi: 3.1.0
info:
  title: Collaborative Travel Planner API
  description: |-
    This is the API for the Collaborative Travel Planner application. It allows users to create, manage, and share travel itineraries. The API supports real-time collaboration features through WebSockets.
    Authentication is handled via JWT Bearer tokens obtained from Google OAuth.
  version: 1.0.0
servers:
  - url: /api
paths:
  /trips:
    get:
      summary: Get all trips for the user
      description: Retrieves a list of all trips associated with the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of trips.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
    post:
      summary: Create a new trip
      description: Creates a new trip with the provided details.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
      responses:
        '201':
          description: Trip created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
  /trips/{tripId}:
    get:
      summary: Get a specific trip
      description: Retrieves the details of a single trip by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested trip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    put:
      summary: Update a trip
      description: Updates the details of an existing trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
      responses:
        '200':
          description: The updated trip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    delete:
      summary: Delete a trip
      description: Deletes a trip by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Trip deleted successfully.
  /trips/{tripId}/destinations:
    post:
      summary: Add a destination to a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDestination'
      responses:
        '201':
          description: Destination added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
  /trips/{tripId}/destinations/{destinationId}:
    put:
      summary: Update a destination
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDestination'
      responses:
        '200':
          description: Destination updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    delete:
      summary: Remove a destination
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Destination removed.
  /trips/{tripId}/collaborators:
    post:
      summary: Add a collaborator to a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCollaborator'
      responses:
        '200':
          description: Collaborator added.
  /trips/{tripId}/collaborators/{userId}:
    delete:
      summary: Remove a collaborator from a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collaborator removed.
  /trips/{tripId}/route-plan:
    post:
      summary: Plan a route for a trip's destinations
      description: Calculates an optimized route based on a list of coordinates for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutePlanRequest'
      responses:
        '200':
          description: Route plan successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutePlanResponse'
        '400':
          description: Invalid route planning data.
  
  
  
  /users/me:
    get:
      summary: Get current user profile
      description: Retrieves the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update current user profile
      description: Updates the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Updated user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      summary: Search users
      description: Search for users by name or email (for collaboration features).
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term to match against user names or emails
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a user's public profile by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User's public profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
  /collaboration/token/{tripId}:
    get:
      summary: Get a Web PubSub access token
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Web PubSub access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPubSubToken'
  /trips/{tripId}/members:
    post:
      summary: Add a member to a trip
      description: Adds a member to a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                role:
                  type: string
                  enum: [member, admin]
      responses:
        '200':
          description: Member added successfully.
  /trips/{tripId}/members/{userId}:
    delete:
      summary: Remove a member from a trip
      description: Removes a member from a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member removed successfully.
  /trips/{tripId}/itinerary:
    get:
      summary: Get trip itinerary
      description: Retrieves the detailed itinerary for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Trip itinerary.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
  /trips/{tripId}/smart-cards:
    get:
      summary: Get smart itinerary cards
      description: Retrieves enriched itinerary cards with real-time data for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Smart itinerary cards with enriched data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tripId:
                    type: string
                  totalCards:
                    type: integer
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItineraryCard'
                  generatedAt:
                    type: string
                    format: date-time
  /trips/{tripId}/smart-cards/{cardId}/refresh:
    post:
      summary: Refresh smart card data
      description: Refreshes enriched data for a specific itinerary card.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Refreshed smart card data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  cardId:
                    type: string
                  card:
                    $ref: '#/components/schemas/ItineraryCard'
                  refreshedAt:
                    type: string
                    format: date-time
  /trips/{tripId}/smart-cards/summary:
    get:
      summary: Get smart cards summary
      description: Retrieves a summary of all smart cards for a trip with analytics.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Smart cards summary and analytics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tripId:
                    type: string
                  summary:
                    $ref: '#/components/schemas/SmartCardsSummary'
                  generatedAt:
                    type: string
                    format: date-time
  /trips/{tripId}/chat/rooms:
    get:
      summary: Get chat rooms for a trip
      description: Retrieves a list of chat rooms for a specific trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of chat rooms.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoom'
    post:
      summary: Create a new chat room
      description: Creates a new chat room for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Chat room created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
  /chat/rooms/{roomId}:
    put:
      summary: Update a chat room
      description: Updates an existing chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Chat room updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
    delete:
      summary: Delete a chat room
      description: Deletes a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Chat room deleted successfully.
  /chat/rooms/{roomId}/messages:
    get:
      summary: Get messages from a chat room
      description: Retrieves messages from a specific chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of messages to retrieve.
          schema:
            type: integer
        - name: offset
          in: query
          description: Offset for pagination.
          schema:
            type: integer
      responses:
        '200':
          description: List of chat messages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
    post:
      summary: Send a new message to a chat room
      description: Sends a new message to a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                message_type:
                  type: string
                  enum: [text, system, ai_suggestion, vote]
                metadata:
                  type: object
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
  /chat/messages/{messageId}:
    put:
      summary: Edit an existing message
      description: Edits an existing message.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Message updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
    delete:
      summary: Delete a message
      description: Deletes a message.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message deleted successfully.
  /chat/rooms/{roomId}/members:
    get:
      summary: Get members in a chat room
      description: Retrieves a list of members in a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of chat room members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoomMember'
    post:
      summary: Add a member to a chat room
      description: Adds a member to a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                role:
                  type: string
                  enum: [member, admin, viewer]
      responses:
        '200':
          description: Member added successfully.
  /chat/rooms/{roomId}/members/{userId}:
    delete:
      summary: Remove a member from a chat room
      description: Removes a member from a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member removed successfully.
  /trips/{tripId}/votes:
    post:
      summary: Create a new vote for a trip
      description: Creates a new vote for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        '201':
          description: Vote created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
    get:
      summary: Get all votes for a trip
      description: Retrieves all active and past votes for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
  /votes/{voteId}:
    get:
      summary: Get a specific vote
      description: Retrieves details of a specific vote.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vote details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
  /votes/{voteId}/responses:
    post:
      summary: Submit a user's response to a vote
      description: Submits a user's response to a vote.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteResponse'
      responses:
        '201':
          description: Vote response submitted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResponse'
  /votes/{voteId}/results:
    get:
      summary: Get vote results
      description: Retrieves the current results of a vote.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vote results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResults'
  /trips/{tripId}/expenses:
    get:
      summary: Get all expenses for a trip
      description: Retrieves all expense records for a specific trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of expenses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
    post:
      summary: Create a new expense record
      description: Creates a new expense record for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
      responses:
        '201':
          description: Expense created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
  /expenses/{expenseId}:
    put:
      summary: Update an expense record
      description: Updates an existing expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
      responses:
        '200':
          description: Expense updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
    delete:
      summary: Delete an expense record
      description: Deletes an expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Expense deleted successfully.
  /expenses/{expenseId}/receipt:
    post:
      summary: Upload a receipt image for OCR processing
      description: Uploads a receipt image for OCR processing and associates it with an expense.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Receipt processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptData'
  /trips/{tripId}/splits:
    get:
      summary: Get all split expense records for a trip
      description: Retrieves all split expense records for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of split expenses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseSplit'
  /expenses/{expenseId}/split:
    post:
      summary: Calculate and create split records for an expense
      description: Calculates and creates split records for a given expense.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                splitMethod:
                  type: string
                  enum: [equal, percentage, custom]
                participants:
                  type: array
                  items:
                    type: string
                splitData:
                  type: object
      responses:
        '201':
          description: Split records created successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseSplit'
  /splits/{splitId}/status:
    put:
      summary: Update the status of a split record
      description: Updates the status of a specific split record (e.g., from 'pending' to 'paid').
      security:
        - bearerAuth: []
      parameters:
        - name: splitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, paid, cancelled]
      responses:
        '200':
          description: Split status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseSplit'
  /trips/{tripId}/balances:
    get:
      summary: Get member balances for a trip
      description: Retrieves the current balances (who owes whom) for all members in a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Member balances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balances'
  /trips/{tripId}/budget:
    get:
      summary: Get budget settings for a trip
      description: Retrieves the budget settings and current spending for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Budget details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
    put:
      summary: Update budget settings for a trip
      description: Updates the budget settings for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBudget'
      responses:
        '200':
          description: Budget updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
  /trips/{tripId}/budget/alerts:
    get:
      summary: Get budget alerts for a trip
      description: Retrieves any active budget alerts for a trip (e.g., nearing limit).
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of budget alerts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BudgetAlert'
  
  
  
  /mcp/weather:
    get:
      summary: Get weather data
      description: Retrieves weather data for a given location.
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Weather data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
  /mcp/exchange-rates:
    get:
      summary: Get exchange rates
      description: Retrieves current exchange rates between two currencies.
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
        - name: to
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Exchange rate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRate'
  /mcp/places/search:
    get:
      summary: Search for places
      description: Searches for places (attractions, restaurants, hotels) based on a query.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of places.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaceData'
  /mcp/places/{placeId}/details:
    get:
      summary: Get place details
      description: Retrieves detailed information for a specific place.
      security:
        - bearerAuth: []
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Place details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceData'
  /mcp/routes/plan:
    post:
      summary: Plan a route between multiple locations
      description: Calculates an optimized route based on a list of coordinates.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutePlanRequest'
      responses:
        '200':
          description: Route plan successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutePlanResponse'
        '400':
          description: Invalid route planning data.
  /mcp/travel/recommendations:
    get:
      summary: Get travel recommendations
      description: Retrieves travel recommendations based on various criteria.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [attraction, restaurant, activity]
      responses:
        '200':
          description: List of travel recommendations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TravelRecommendation'
  /mcp/travel/restaurants:
    get:
      summary: Get restaurant recommendations
      description: Retrieves restaurant recommendations for a given location.
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
        - name: cuisine
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of restaurant recommendations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestaurantRecommendation'
  /mcp/travel/activities:
    get:
      summary: Get activity recommendations
      description: Retrieves activity recommendations for a given location and date.
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of activity recommendations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityRecommendation'
  /booking/flights/search:
    post:
      summary: Search for flight options
      description: Searches for flight options across multiple providers.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightSearchRequest'
      responses:
        '200':
          description: List of flight search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlightSearchResult'
  /booking/hotels/search:
    post:
      summary: Search for hotel options
      description: Searches for hotel options across multiple providers.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelSearchRequest'
      responses:
        '200':
          description: List of hotel search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HotelSearchResult'
  /booking/{bookingId}/details:
    get:
      summary: Get booking details
      description: Retrieves details of a specific booking (flight or hotel).
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDetails'
  /booking/{bookingId}/confirm:
    post:
      summary: Confirm a booking
      description: Confirms a booking. This might trigger a redirect to an external booking provider.
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking confirmed.
        '302':
          description: Redirect to external booking provider.
  /booking/providers/status:
    get:
      summary: Get booking providers status
      description: Retrieves the health status and availability of all booking providers.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Booking providers status information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderStatus'
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      available:
                        type: integer
                      unavailable:
                        type: integer
  /booking/providers/health-check:
    post:
      summary: Trigger health check for all booking providers
      description: Forces a health check for all booking providers to verify their availability and connectivity.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Health check completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '500':
          description: Health check failed
  /booking/circuit-breakers/reset:
    post:
      summary: Reset all circuit breakers
      description: Resets all circuit breakers for booking providers, allowing failed providers to be retried.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Circuit breakers reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '500':
          description: Reset operation failed
  /booking/config:
    put:
      summary: Update booking service configuration
      description: Updates runtime configuration for the booking service, including failover and retry settings.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enableFailover:
                  type: boolean
                  description: Enable or disable provider failover
                maxRetries:
                  type: integer
                  description: Maximum number of retry attempts (0-5)
                  minimum: 0
                  maximum: 5
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid configuration parameters
        '500':
          description: Configuration update failed
  /users/me/notifications:
    get:
      summary: Get all notifications for the user
      description: Retrieves all notifications for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /notifications/{notificationId}/read:
    put:
      summary: Mark a notification as read
      description: Marks a specific notification as read.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read.
  /users/me/notification-settings:
    put:
      summary: Update user notification settings
      description: Updates the notification settings for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationSettings'
      responses:
        '200':
          description: Notification settings updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettings'
  
  /trips/{tripId}/quick-actions/add-destination:
    post:
      summary: Quickly add a destination to the trip itinerary
      description: Quickly adds a destination to the trip itinerary.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationName:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: Destination added.
  /trips/{tripId}/quick-actions/split-expense:
    post:
      summary: Initiate an expense split for a trip
      description: Initiates an expense split for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expenseId:
                  type: string
                method:
                  type: string
      responses:
        '200':
          description: Expense split initiated.
  /trips/{tripId}/quick-actions/get-weather:
    post:
      summary: Get current weather for the trip's destination
      description: Retrieves current weather for the trip's destination.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Weather data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
  /trips/{tripId}/quick-actions/create-vote:
    post:
      summary: Quickly create a new vote in the trip's chat
      description: Quickly creates a new vote in the trip's chat.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                options:
                  type: array
                  items:
                    type: object
      responses:
        '201':
          description: Vote created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
  /trips/{tripId}/agents/optimize-itinerary:
    post:
      summary: Trigger AI agents to optimize trip itinerary
      description: Orchestrates multiple AI agents to analyze requirements and optimize the trip itinerary based on chat messages and preferences.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    description: Chat messages to analyze
                options:
                  type: object
                  properties:
                    prioritizeTime:
                      type: boolean
                    prioritizeCost:
                      type: boolean
                    prioritizeExperience:
                      type: boolean
                    generateAlternatives:
                      type: boolean
              required:
                - messages
      responses:
        '200':
          description: Itinerary optimization completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentOptimizationResponse'
        '400':
          description: Invalid request data
        '404':
          description: Trip not found
        '500':
          description: Optimization failed
  /trips/{tripId}/agents/recommendations:
    post:
      summary: Request AI recommendations for a trip
      description: Requests AI recommendations (destinations, activities, general) based on trip context and user preferences.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [destination, activity, general]
                  description: Type of recommendation requested.
                context:
                  type: object
                  description: Additional context for recommendations (e.g., current location, dates).
                preferences:
                  type: object
                  description: User preferences to guide recommendations.
              required:
                - type
      responses:
        '200':
          description: List of AI-generated recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  recommendations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        type:
                          type: string
                        description:
                          type: string
                        score:
                          type: number
                          format: float
                        details:
                          type: object
  /trips/{tripId}/agents/analyze-requirements:
    post:
      summary: Analyze travel requirements from chat messages
      description: Uses AI agents to extract and analyze travel requirements from conversation messages.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Extracted travel intentions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractedInfo'
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    description: Chat messages to analyze
              required:
                - messages
      responses:
        '200':
          description: Requirements analysis completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRequirementResponse'
  /trips/{tripId}/agents/adjust-plan:
    post:
      summary: Handle adaptive adjustments for trip disruptions
      description: Creates adjustment plans when disruptions occur during travel.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disruption:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [weather, transportation, accommodation, activity_closure, emergency]
                    severity:
                      type: string
                      enum: [low, medium, high, critical]
                    affectedDestination:
                      type: string
                    affectedDate:
                      type: string
                      format: date
                    description:
                      type: string
                    suggestedActions:
                      type: array
                      items:
                        type: string
                  required:
                    - type
                    - severity
                    - description
              required:
                - disruption
      responses:
        '200':
          description: Adjustment plan created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentAdjustmentResponse'
  /trips/{tripId}/agents/status/{sessionId}:
    get:
      summary: Get agent session status
      description: Retrieves the current status of an AI agent workflow session.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session status retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSessionStatus'
        '404':
          description: Session not found
  /trips/{tripId}/agents/sessions/{sessionId}:
    delete:
      summary: Cancel an active agent session
      description: Cancels an active AI agent workflow session.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid